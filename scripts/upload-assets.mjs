// scripts/upload-assets.mjs// Node.js script to upload assets from a local folder to Vercel Blob storage, delete remote assets, and update ASSET_LINKS.md// Usage://   node scripts/upload-assets.mjs --folder=public/spare-parts --update-links//   node scripts/upload-assets.mjs --delete-remote-folder=spare-partsimport { readdir, stat, readFile, writeFile } from 'fs/promises';import path from 'path';import { createClient } from '@vercel/blob';import dotenv from 'dotenv';dotenv.config({ path: path.resolve(process.cwd(), '.env.local') });const BLOB_TOKEN = process.env.BLOB_READ_WRITE_TOKEN;const BLOB_BUCKET = process.env.BLOB_BUCKET;const BLOB_URL_BASE = process.env.BLOB_URL_BASE || 'https://vercel-storage.com';if (!BLOB_TOKEN || !BLOB_BUCKET) {  console.error('Missing BLOB_READ_WRITE_TOKEN or BLOB_BUCKET in .env.local');  process.exit(1);}const blob = createClient({ token: BLOB_TOKEN, bucket: BLOB_BUCKET });async function walk(dir) {  let files = [];  for (const entry of await readdir(dir, { withFileTypes: true })) {    const fullPath = path.join(dir, entry.name);    if (entry.isDirectory()) {      files = files.concat(await walk(fullPath));    } else {      files.push(fullPath);    }  }  return files;}async function uploadFolder(localFolder, remoteFolder) {  const files = await walk(localFolder);  const uploaded = [];  for (const file of files) {    const relPath = path.relative(localFolder, file);    const blobPath = path.posix.join(remoteFolder, relPath).replace(/\\/g, '/');    const data = await readFile(file);    const { url } = await blob.upload(blobPath, data, { contentType: undefined });    uploaded.push({ file, url, blobPath });    console.log(`Uploaded: ${file} -> ${url}`);  }  return uploaded;}async function deleteRemoteFolder(remoteFolder) {  const list = await blob.list(remoteFolder);  for (const item of list) {    await blob.delete(item.key);    console.log(`Deleted remote: ${item.key}`);  }}async function updateAssetLinks(uploaded, assetLinksPath) {  let md = '';  for (const { file, url, blobPath } of uploaded) {    md += `| ${path.basename(file)} | ${blobPath} | ${url} |\n`;  }  await writeFile(assetLinksPath, md, { flag: 'a' });  console.log(`Updated ${assetLinksPath}`);}async function main() {  const args = process.argv.slice(2);  const folderArg = args.find(a => a.startsWith('--folder='));  const deleteArg = args.find(a => a.startsWith('--delete-remote-folder='));  const updateLinks = args.includes('--update-links');  const assetLinksPath = path.resolve('ASSET_LINKS.md');  if (deleteArg) {    const remoteFolder = deleteArg.split('=')[1];    await deleteRemoteFolder(remoteFolder);    return;  }  if (folderArg) {    const localFolder = folderArg.split('=')[1];    const remoteFolder = path.basename(localFolder);    const uploaded = await uploadFolder(localFolder, remoteFolder);    if (updateLinks) {      await updateAssetLinks(uploaded, assetLinksPath);    }    return;  }  console.log('Usage:');  console.log('  node scripts/upload-assets.mjs --folder=public/spare-parts --update-links');  console.log('  node scripts/upload-assets.mjs --delete-remote-folder=spare-parts');}main().catch(e => { console.error(e); process.exit(1); });